/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Node } from './Node';
import {
    NodeFromJSON,
    NodeFromJSONTyped,
    NodeToJSON,
    NodeToJSONTyped,
} from './Node';
import type { Edge } from './Edge';
import {
    EdgeFromJSON,
    EdgeFromJSONTyped,
    EdgeToJSON,
    EdgeToJSONTyped,
} from './Edge';

/**
 * 
 * @export
 * @interface GraphResponse
 */
export interface GraphResponse {
    /**
     * 
     * @type {Array<Node>}
     * @memberof GraphResponse
     */
    nodes: Array<Node>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof GraphResponse
     */
    edges: Array<Edge>;
}

/**
 * Check if a given object implements the GraphResponse interface.
 */
export function instanceOfGraphResponse(value: object): value is GraphResponse {
    if (!('nodes' in value) || value['nodes'] === undefined) return false;
    if (!('edges' in value) || value['edges'] === undefined) return false;
    return true;
}

export function GraphResponseFromJSON(json: any): GraphResponse {
    return GraphResponseFromJSONTyped(json, false);
}

export function GraphResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'nodes': ((json['nodes'] as Array<any>).map(NodeFromJSON)),
        'edges': ((json['edges'] as Array<any>).map(EdgeFromJSON)),
    };
}

export function GraphResponseToJSON(json: any): GraphResponse {
    return GraphResponseToJSONTyped(json, false);
}

export function GraphResponseToJSONTyped(value?: GraphResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nodes': ((value['nodes'] as Array<any>).map(NodeToJSON)),
        'edges': ((value['edges'] as Array<any>).map(EdgeToJSON)),
    };
}

