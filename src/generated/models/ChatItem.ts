/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceItem } from './ReferenceItem';
import {
    ReferenceItemFromJSON,
    ReferenceItemFromJSONTyped,
    ReferenceItemToJSON,
    ReferenceItemToJSONTyped,
} from './ReferenceItem';
import type { Document } from './Document';
import {
    DocumentFromJSON,
    DocumentFromJSONTyped,
    DocumentToJSON,
    DocumentToJSONTyped,
} from './Document';

/**
 * 
 * @export
 * @interface ChatItem
 */
export interface ChatItem {
    /**
     * 
     * @type {string}
     * @memberof ChatItem
     */
    chat_id: string;
    /**
     * 
     * @type {Array<Document>}
     * @memberof ChatItem
     */
    quote?: Array<Document> | null;
    /**
     * 
     * @type {string}
     * @memberof ChatItem
     */
    content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatItem
     */
    reasoning_content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatItem
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof ChatItem
     */
    finish_reason?: string | null;
    /**
     * 
     * @type {Array<ReferenceItem>}
     * @memberof ChatItem
     */
    references?: Array<ReferenceItem> | null;
}

/**
 * Check if a given object implements the ChatItem interface.
 */
export function instanceOfChatItem(value: object): value is ChatItem {
    if (!('chat_id' in value) || value['chat_id'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    return true;
}

export function ChatItemFromJSON(json: any): ChatItem {
    return ChatItemFromJSONTyped(json, false);
}

export function ChatItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatItem {
    if (json == null) {
        return json;
    }
    return {
        
        'chat_id': json['chat_id'],
        'quote': json['quote'] == null ? undefined : ((json['quote'] as Array<any>).map(DocumentFromJSON)),
        'content': json['content'] == null ? undefined : json['content'],
        'reasoning_content': json['reasoning_content'] == null ? undefined : json['reasoning_content'],
        'role': json['role'],
        'finish_reason': json['finish_reason'] == null ? undefined : json['finish_reason'],
        'references': json['references'] == null ? undefined : ((json['references'] as Array<any>).map(ReferenceItemFromJSON)),
    };
}

export function ChatItemToJSON(json: any): ChatItem {
    return ChatItemToJSONTyped(json, false);
}

export function ChatItemToJSONTyped(value?: ChatItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chat_id': value['chat_id'],
        'quote': value['quote'] == null ? undefined : ((value['quote'] as Array<any>).map(DocumentToJSON)),
        'content': value['content'],
        'reasoning_content': value['reasoning_content'],
        'role': value['role'],
        'finish_reason': value['finish_reason'],
        'references': value['references'] == null ? undefined : ((value['references'] as Array<any>).map(ReferenceItemToJSON)),
    };
}

