/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyCreateRequest,
  ApiKeyCreateResponse,
  ApiKeysDeleteRequest,
  HTTPValidationError,
  NormalResponse,
  PaginationApiKeyInfo,
  SearchApiKeysRequest,
} from '../models/index';
import {
    ApiKeyCreateRequestFromJSON,
    ApiKeyCreateRequestToJSON,
    ApiKeyCreateResponseFromJSON,
    ApiKeyCreateResponseToJSON,
    ApiKeysDeleteRequestFromJSON,
    ApiKeysDeleteRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    PaginationApiKeyInfoFromJSON,
    PaginationApiKeyInfoToJSON,
    SearchApiKeysRequestFromJSON,
    SearchApiKeysRequestToJSON,
} from '../models/index';

export interface CreateApiKeyApiKeyCreatePostRequest {
    apiKeyCreateRequest: ApiKeyCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteApiKeyApiKeyDeletePostRequest {
    apiKeysDeleteRequest: ApiKeysDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchApiKeyApiKeySearchPostRequest {
    searchApiKeysRequest: SearchApiKeysRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class ApiKeyApi extends runtime.BaseAPI {

    /**
     * Create Api Key
     */
    async createApiKeyApiKeyCreatePostRaw(requestParameters: CreateApiKeyApiKeyCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyCreateResponse>> {
        if (requestParameters['apiKeyCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'apiKeyCreateRequest',
                'Required parameter "apiKeyCreateRequest" was null or undefined when calling createApiKeyApiKeyCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/api-key/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyCreateRequestToJSON(requestParameters['apiKeyCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Api Key
     */
    async createApiKeyApiKeyCreatePost(requestParameters: CreateApiKeyApiKeyCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyCreateResponse> {
        const response = await this.createApiKeyApiKeyCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Api Key
     */
    async deleteApiKeyApiKeyDeletePostRaw(requestParameters: DeleteApiKeyApiKeyDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['apiKeysDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'apiKeysDeleteRequest',
                'Required parameter "apiKeysDeleteRequest" was null or undefined when calling deleteApiKeyApiKeyDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/api-key/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeysDeleteRequestToJSON(requestParameters['apiKeysDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Api Key
     */
    async deleteApiKeyApiKeyDeletePost(requestParameters: DeleteApiKeyApiKeyDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteApiKeyApiKeyDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Api Key
     */
    async searchApiKeyApiKeySearchPostRaw(requestParameters: SearchApiKeyApiKeySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApiKeyInfo>> {
        if (requestParameters['searchApiKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'searchApiKeysRequest',
                'Required parameter "searchApiKeysRequest" was null or undefined when calling searchApiKeyApiKeySearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/api-key/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchApiKeysRequestToJSON(requestParameters['searchApiKeysRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationApiKeyInfoFromJSON(jsonValue));
    }

    /**
     * Search Api Key
     */
    async searchApiKeyApiKeySearchPost(requestParameters: SearchApiKeyApiKeySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApiKeyInfo> {
        const response = await this.searchApiKeyApiKeySearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
