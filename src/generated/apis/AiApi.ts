/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatMessages,
  DeleteModelProviderRequest,
  DeleteModelRequest,
  HTTPValidationError,
  Model,
  ModelCreateRequest,
  ModelCreateResponse,
  ModelProvider,
  ModelProviderCreateRequest,
  ModelProviderCreateResponse,
  ModelProviderRequest,
  ModelProviderSearchRequest,
  ModelProviderSearchResponse,
  ModelProviderUpdateRequest,
  ModelRequest,
  ModelSearchRequest,
  ModelSearchResponse,
  ModelUpdateRequest,
  NormalResponse,
} from '../models/index';
import {
    ChatMessagesFromJSON,
    ChatMessagesToJSON,
    DeleteModelProviderRequestFromJSON,
    DeleteModelProviderRequestToJSON,
    DeleteModelRequestFromJSON,
    DeleteModelRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ModelFromJSON,
    ModelToJSON,
    ModelCreateRequestFromJSON,
    ModelCreateRequestToJSON,
    ModelCreateResponseFromJSON,
    ModelCreateResponseToJSON,
    ModelProviderFromJSON,
    ModelProviderToJSON,
    ModelProviderCreateRequestFromJSON,
    ModelProviderCreateRequestToJSON,
    ModelProviderCreateResponseFromJSON,
    ModelProviderCreateResponseToJSON,
    ModelProviderRequestFromJSON,
    ModelProviderRequestToJSON,
    ModelProviderSearchRequestFromJSON,
    ModelProviderSearchRequestToJSON,
    ModelProviderSearchResponseFromJSON,
    ModelProviderSearchResponseToJSON,
    ModelProviderUpdateRequestFromJSON,
    ModelProviderUpdateRequestToJSON,
    ModelRequestFromJSON,
    ModelRequestToJSON,
    ModelSearchRequestFromJSON,
    ModelSearchRequestToJSON,
    ModelSearchResponseFromJSON,
    ModelSearchResponseToJSON,
    ModelUpdateRequestFromJSON,
    ModelUpdateRequestToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
} from '../models/index';

export interface AskAiAiAskPostRequest {
    chatMessages: ChatMessages;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateModelAiModelCreatePostRequest {
    modelCreateRequest: ModelCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateModelProviderAiModelProviderCreatePostRequest {
    modelProviderCreateRequest: ModelProviderCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteAiModelAiModelDeletePostRequest {
    deleteModelRequest: DeleteModelRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteAiModelAiModelProviderDeletePostRequest {
    deleteModelProviderRequest: DeleteModelProviderRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetAiModelAiModelDetailPostRequest {
    modelRequest: ModelRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetAiModelAiModelProviderDetailPostRequest {
    modelProviderRequest: ModelProviderRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ListAiModelAiModelSearchPostRequest {
    modelSearchRequest: ModelSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ListAiModelProviderAiModelProviderSearchPostRequest {
    modelProviderSearchRequest: ModelProviderSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateAiModelAiModelUpdatePostRequest {
    modelUpdateRequest: ModelUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateAiModelProviderAiModelProviderUpdatePostRequest {
    modelProviderUpdateRequest: ModelProviderUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class AiApi extends runtime.BaseAPI {

    /**
     * Ask Ai
     */
    async askAiAiAskPostRaw(requestParameters: AskAiAiAskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatMessages'] == null) {
            throw new runtime.RequiredError(
                'chatMessages',
                'Required parameter "chatMessages" was null or undefined when calling askAiAiAskPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/ask`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatMessagesToJSON(requestParameters['chatMessages']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ask Ai
     */
    async askAiAiAskPost(requestParameters: AskAiAiAskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.askAiAiAskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Model
     */
    async createModelAiModelCreatePostRaw(requestParameters: CreateModelAiModelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelCreateResponse>> {
        if (requestParameters['modelCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'modelCreateRequest',
                'Required parameter "modelCreateRequest" was null or undefined when calling createModelAiModelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelCreateRequestToJSON(requestParameters['modelCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Model
     */
    async createModelAiModelCreatePost(requestParameters: CreateModelAiModelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelCreateResponse> {
        const response = await this.createModelAiModelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Model Provider
     */
    async createModelProviderAiModelProviderCreatePostRaw(requestParameters: CreateModelProviderAiModelProviderCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelProviderCreateResponse>> {
        if (requestParameters['modelProviderCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'modelProviderCreateRequest',
                'Required parameter "modelProviderCreateRequest" was null or undefined when calling createModelProviderAiModelProviderCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model-provider/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelProviderCreateRequestToJSON(requestParameters['modelProviderCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelProviderCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Model Provider
     */
    async createModelProviderAiModelProviderCreatePost(requestParameters: CreateModelProviderAiModelProviderCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelProviderCreateResponse> {
        const response = await this.createModelProviderAiModelProviderCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Ai Model
     */
    async deleteAiModelAiModelDeletePostRaw(requestParameters: DeleteAiModelAiModelDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteModelRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteModelRequest',
                'Required parameter "deleteModelRequest" was null or undefined when calling deleteAiModelAiModelDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteModelRequestToJSON(requestParameters['deleteModelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Ai Model
     */
    async deleteAiModelAiModelDeletePost(requestParameters: DeleteAiModelAiModelDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteAiModelAiModelDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Ai Model
     */
    async deleteAiModelAiModelProviderDeletePostRaw(requestParameters: DeleteAiModelAiModelProviderDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteModelProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteModelProviderRequest',
                'Required parameter "deleteModelProviderRequest" was null or undefined when calling deleteAiModelAiModelProviderDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model-provider/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteModelProviderRequestToJSON(requestParameters['deleteModelProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Ai Model
     */
    async deleteAiModelAiModelProviderDeletePost(requestParameters: DeleteAiModelAiModelProviderDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteAiModelAiModelProviderDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Ai Model
     */
    async getAiModelAiModelDetailPostRaw(requestParameters: GetAiModelAiModelDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters['modelRequest'] == null) {
            throw new runtime.RequiredError(
                'modelRequest',
                'Required parameter "modelRequest" was null or undefined when calling getAiModelAiModelDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelRequestToJSON(requestParameters['modelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Get Ai Model
     */
    async getAiModelAiModelDetailPost(requestParameters: GetAiModelAiModelDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model> {
        const response = await this.getAiModelAiModelDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Ai Model
     */
    async getAiModelAiModelProviderDetailPostRaw(requestParameters: GetAiModelAiModelProviderDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelProvider>> {
        if (requestParameters['modelProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'modelProviderRequest',
                'Required parameter "modelProviderRequest" was null or undefined when calling getAiModelAiModelProviderDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model-provider/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelProviderRequestToJSON(requestParameters['modelProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelProviderFromJSON(jsonValue));
    }

    /**
     * Get Ai Model
     */
    async getAiModelAiModelProviderDetailPost(requestParameters: GetAiModelAiModelProviderDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelProvider> {
        const response = await this.getAiModelAiModelProviderDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Ai Model
     */
    async listAiModelAiModelSearchPostRaw(requestParameters: ListAiModelAiModelSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelSearchResponse>> {
        if (requestParameters['modelSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'modelSearchRequest',
                'Required parameter "modelSearchRequest" was null or undefined when calling listAiModelAiModelSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelSearchRequestToJSON(requestParameters['modelSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelSearchResponseFromJSON(jsonValue));
    }

    /**
     * List Ai Model
     */
    async listAiModelAiModelSearchPost(requestParameters: ListAiModelAiModelSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelSearchResponse> {
        const response = await this.listAiModelAiModelSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Ai Model Provider
     */
    async listAiModelProviderAiModelProviderSearchPostRaw(requestParameters: ListAiModelProviderAiModelProviderSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelProviderSearchResponse>> {
        if (requestParameters['modelProviderSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'modelProviderSearchRequest',
                'Required parameter "modelProviderSearchRequest" was null or undefined when calling listAiModelProviderAiModelProviderSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model-provider/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelProviderSearchRequestToJSON(requestParameters['modelProviderSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelProviderSearchResponseFromJSON(jsonValue));
    }

    /**
     * List Ai Model Provider
     */
    async listAiModelProviderAiModelProviderSearchPost(requestParameters: ListAiModelProviderAiModelProviderSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelProviderSearchResponse> {
        const response = await this.listAiModelProviderAiModelProviderSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Ai Model
     */
    async updateAiModelAiModelUpdatePostRaw(requestParameters: UpdateAiModelAiModelUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['modelUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'modelUpdateRequest',
                'Required parameter "modelUpdateRequest" was null or undefined when calling updateAiModelAiModelUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelUpdateRequestToJSON(requestParameters['modelUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Ai Model
     */
    async updateAiModelAiModelUpdatePost(requestParameters: UpdateAiModelAiModelUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateAiModelAiModelUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Ai Model Provider
     */
    async updateAiModelProviderAiModelProviderUpdatePostRaw(requestParameters: UpdateAiModelProviderAiModelProviderUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['modelProviderUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'modelProviderUpdateRequest',
                'Required parameter "modelProviderUpdateRequest" was null or undefined when calling updateAiModelProviderAiModelProviderUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/ai/model-provider/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelProviderUpdateRequestToJSON(requestParameters['modelProviderUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Ai Model Provider
     */
    async updateAiModelProviderAiModelProviderUpdatePost(requestParameters: UpdateAiModelProviderAiModelProviderUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateAiModelProviderAiModelProviderUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
