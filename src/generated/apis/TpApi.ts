/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllMySectionsResponse,
  CreateLabelResponse,
  DocumentCreateRequest,
  DocumentCreateResponse,
  HTTPValidationError,
  LabelAddRequest,
  LabelListResponse,
  NormalResponse,
  SectionCreateRequest,
  SectionCreateResponse,
} from '../models/index';
import {
    AllMySectionsResponseFromJSON,
    AllMySectionsResponseToJSON,
    CreateLabelResponseFromJSON,
    CreateLabelResponseToJSON,
    DocumentCreateRequestFromJSON,
    DocumentCreateRequestToJSON,
    DocumentCreateResponseFromJSON,
    DocumentCreateResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LabelAddRequestFromJSON,
    LabelAddRequestToJSON,
    LabelListResponseFromJSON,
    LabelListResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    SectionCreateRequestFromJSON,
    SectionCreateRequestToJSON,
    SectionCreateResponseFromJSON,
    SectionCreateResponseToJSON,
} from '../models/index';

export interface AddLabelTpSectionLabelCreatePostRequest {
    labelAddRequest: LabelAddRequest;
    apiKey?: string | null;
}

export interface CreateDocumentLabelTpDocumentLabelCreatePostRequest {
    labelAddRequest: LabelAddRequest;
    apiKey?: string | null;
}

export interface CreateDocumentTpDocumentCreatePostRequest {
    documentCreateRequest: DocumentCreateRequest;
    apiKey?: string | null;
}

export interface CreateSectionTpSectionCreatePostRequest {
    sectionCreateRequest: SectionCreateRequest;
    apiKey?: string | null;
}

export interface GetAllMineSectionsTpSectionMineAllPostRequest {
    apiKey?: string | null;
}

export interface ListLabelTpDocumentLabelListPostRequest {
    apiKey?: string | null;
}

export interface UploadFileSystemTpFileUploadPostRequest {
    file: Blob;
    filePath: string;
    contentType: string;
    apiKey?: string | null;
}

/**
 * 
 */
export class TpApi extends runtime.BaseAPI {

    /**
     * Add Label
     */
    async addLabelTpSectionLabelCreatePostRaw(requestParameters: AddLabelTpSectionLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLabelResponse>> {
        if (requestParameters['labelAddRequest'] == null) {
            throw new runtime.RequiredError(
                'labelAddRequest',
                'Required parameter "labelAddRequest" was null or undefined when calling addLabelTpSectionLabelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }


        let urlPath = `/tp/section/label/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelAddRequestToJSON(requestParameters['labelAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelResponseFromJSON(jsonValue));
    }

    /**
     * Add Label
     */
    async addLabelTpSectionLabelCreatePost(requestParameters: AddLabelTpSectionLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLabelResponse> {
        const response = await this.addLabelTpSectionLabelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Document Label
     */
    async createDocumentLabelTpDocumentLabelCreatePostRaw(requestParameters: CreateDocumentLabelTpDocumentLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLabelResponse>> {
        if (requestParameters['labelAddRequest'] == null) {
            throw new runtime.RequiredError(
                'labelAddRequest',
                'Required parameter "labelAddRequest" was null or undefined when calling createDocumentLabelTpDocumentLabelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }


        let urlPath = `/tp/document/label/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelAddRequestToJSON(requestParameters['labelAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelResponseFromJSON(jsonValue));
    }

    /**
     * Create Document Label
     */
    async createDocumentLabelTpDocumentLabelCreatePost(requestParameters: CreateDocumentLabelTpDocumentLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLabelResponse> {
        const response = await this.createDocumentLabelTpDocumentLabelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Document
     */
    async createDocumentTpDocumentCreatePostRaw(requestParameters: CreateDocumentTpDocumentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCreateResponse>> {
        if (requestParameters['documentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'documentCreateRequest',
                'Required parameter "documentCreateRequest" was null or undefined when calling createDocumentTpDocumentCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }


        let urlPath = `/tp/document/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCreateRequestToJSON(requestParameters['documentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Document
     */
    async createDocumentTpDocumentCreatePost(requestParameters: CreateDocumentTpDocumentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCreateResponse> {
        const response = await this.createDocumentTpDocumentCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Section
     */
    async createSectionTpSectionCreatePostRaw(requestParameters: CreateSectionTpSectionCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionCreateResponse>> {
        if (requestParameters['sectionCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionCreateRequest',
                'Required parameter "sectionCreateRequest" was null or undefined when calling createSectionTpSectionCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }


        let urlPath = `/tp/section/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionCreateRequestToJSON(requestParameters['sectionCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Section
     */
    async createSectionTpSectionCreatePost(requestParameters: CreateSectionTpSectionCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionCreateResponse> {
        const response = await this.createSectionTpSectionCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Mine Sections
     */
    async getAllMineSectionsTpSectionMineAllPostRaw(requestParameters: GetAllMineSectionsTpSectionMineAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllMySectionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }


        let urlPath = `/tp/section/mine/all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllMySectionsResponseFromJSON(jsonValue));
    }

    /**
     * Get All Mine Sections
     */
    async getAllMineSectionsTpSectionMineAllPost(requestParameters: GetAllMineSectionsTpSectionMineAllPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllMySectionsResponse> {
        const response = await this.getAllMineSectionsTpSectionMineAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Label
     */
    async listLabelTpDocumentLabelListPostRaw(requestParameters: ListLabelTpDocumentLabelListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }


        let urlPath = `/tp/document/label/list`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelListResponseFromJSON(jsonValue));
    }

    /**
     * List Label
     */
    async listLabelTpDocumentLabelListPost(requestParameters: ListLabelTpDocumentLabelListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelListResponse> {
        const response = await this.listLabelTpDocumentLabelListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload File System
     */
    async uploadFileSystemTpFileUploadPostRaw(requestParameters: UploadFileSystemTpFileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadFileSystemTpFileUploadPost().'
            );
        }

        if (requestParameters['filePath'] == null) {
            throw new runtime.RequiredError(
                'filePath',
                'Required parameter "filePath" was null or undefined when calling uploadFileSystemTpFileUploadPost().'
            );
        }

        if (requestParameters['contentType'] == null) {
            throw new runtime.RequiredError(
                'contentType',
                'Required parameter "contentType" was null or undefined when calling uploadFileSystemTpFileUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['filePath'] != null) {
            formParams.append('file_path', requestParameters['filePath'] as any);
        }

        if (requestParameters['contentType'] != null) {
            formParams.append('content_type', requestParameters['contentType'] as any);
        }


        let urlPath = `/tp/file/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Upload File System
     */
    async uploadFileSystemTpFileUploadPost(requestParameters: UploadFileSystemTpFileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.uploadFileSystemTpFileUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
