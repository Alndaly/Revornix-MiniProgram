/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLabelResponse,
  DocumentAiSummaryRequest,
  DocumentCreateRequest,
  DocumentCreateResponse,
  DocumentDeleteRequest,
  DocumentDetailRequest,
  DocumentDetailResponse,
  DocumentMarkdownTransformRequest,
  DocumentMonthSummaryResponse,
  DocumentNoteCreateRequest,
  DocumentNoteDeleteRequest,
  DocumentUpdateRequest,
  HTTPValidationError,
  InifiniteScrollPagnitionDocumentInfo,
  InifiniteScrollPagnitionDocumentNoteInfo,
  LabelAddRequest,
  LabelDeleteRequest,
  LabelListResponse,
  LabelSummaryResponse,
  NormalResponse,
  ReadRequest,
  SearchAllMyDocumentsRequest,
  SearchDocumentNoteRequest,
  SearchMyStarDocumentsRequest,
  SearchRecentReadRequest,
  SearchUnreadListRequest,
  StarRequest,
  SuccessResponse,
  VectorSearchRequest,
  VectorSearchResponse,
} from '../models/index';
import {
    CreateLabelResponseFromJSON,
    CreateLabelResponseToJSON,
    DocumentAiSummaryRequestFromJSON,
    DocumentAiSummaryRequestToJSON,
    DocumentCreateRequestFromJSON,
    DocumentCreateRequestToJSON,
    DocumentCreateResponseFromJSON,
    DocumentCreateResponseToJSON,
    DocumentDeleteRequestFromJSON,
    DocumentDeleteRequestToJSON,
    DocumentDetailRequestFromJSON,
    DocumentDetailRequestToJSON,
    DocumentDetailResponseFromJSON,
    DocumentDetailResponseToJSON,
    DocumentMarkdownTransformRequestFromJSON,
    DocumentMarkdownTransformRequestToJSON,
    DocumentMonthSummaryResponseFromJSON,
    DocumentMonthSummaryResponseToJSON,
    DocumentNoteCreateRequestFromJSON,
    DocumentNoteCreateRequestToJSON,
    DocumentNoteDeleteRequestFromJSON,
    DocumentNoteDeleteRequestToJSON,
    DocumentUpdateRequestFromJSON,
    DocumentUpdateRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InifiniteScrollPagnitionDocumentInfoFromJSON,
    InifiniteScrollPagnitionDocumentInfoToJSON,
    InifiniteScrollPagnitionDocumentNoteInfoFromJSON,
    InifiniteScrollPagnitionDocumentNoteInfoToJSON,
    LabelAddRequestFromJSON,
    LabelAddRequestToJSON,
    LabelDeleteRequestFromJSON,
    LabelDeleteRequestToJSON,
    LabelListResponseFromJSON,
    LabelListResponseToJSON,
    LabelSummaryResponseFromJSON,
    LabelSummaryResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    ReadRequestFromJSON,
    ReadRequestToJSON,
    SearchAllMyDocumentsRequestFromJSON,
    SearchAllMyDocumentsRequestToJSON,
    SearchDocumentNoteRequestFromJSON,
    SearchDocumentNoteRequestToJSON,
    SearchMyStarDocumentsRequestFromJSON,
    SearchMyStarDocumentsRequestToJSON,
    SearchRecentReadRequestFromJSON,
    SearchRecentReadRequestToJSON,
    SearchUnreadListRequestFromJSON,
    SearchUnreadListRequestToJSON,
    StarRequestFromJSON,
    StarRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    VectorSearchRequestFromJSON,
    VectorSearchRequestToJSON,
    VectorSearchResponseFromJSON,
    VectorSearchResponseToJSON,
} from '../models/index';

export interface AddLabelDocumentLabelCreatePostRequest {
    labelAddRequest: LabelAddRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateAiSummaryDocumentAiSummaryPostRequest {
    documentAiSummaryRequest: DocumentAiSummaryRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateDocumentDocumentCreatePostRequest {
    documentCreateRequest: DocumentCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateNoteDocumentNoteCreatePostRequest {
    documentNoteCreateRequest: DocumentNoteCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteDocumentDocumentDeletePostRequest {
    documentDeleteRequest: DocumentDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteLabelDocumentLabelDeletePostRequest {
    labelDeleteRequest: LabelDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteNoteDocumentNoteDeletePostRequest {
    documentNoteDeleteRequest: DocumentNoteDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetDocumentDetailDocumentDetailPostRequest {
    documentDetailRequest: DocumentDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetLabelSummaryDocumentLabelSummaryPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetMonthSummaryDocumentMonthSummaryPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ListLabelDocumentLabelListPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ReadDocumentDocumentReadPostRequest {
    readRequest: ReadRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface RecentReadDocumentDocumentRecentSearchPostRequest {
    searchRecentReadRequest: SearchRecentReadRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchAllMineDocumentsDocumentSearchMinePostRequest {
    searchAllMyDocumentsRequest: SearchAllMyDocumentsRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchKnowledgeVectorDocumentVectorSearchPostRequest {
    vectorSearchRequest: VectorSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchMyStarDocumentsDocumentStarSearchPostRequest {
    searchMyStarDocumentsRequest: SearchMyStarDocumentsRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchUserUnreadDocumentsDocumentUnreadSearchPostRequest {
    searchUnreadListRequest: SearchUnreadListRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface StarDocumentDocumentStarPostRequest {
    starRequest: StarRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface TransformMarkdownDocumentMarkdownTransformPostRequest {
    documentMarkdownTransformRequest: DocumentMarkdownTransformRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateDocumentDocumentUpdatePostRequest {
    documentUpdateRequest: DocumentUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateNoteDocumentNoteSearchPostRequest {
    searchDocumentNoteRequest: SearchDocumentNoteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Add Label
     */
    async addLabelDocumentLabelCreatePostRaw(requestParameters: AddLabelDocumentLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLabelResponse>> {
        if (requestParameters['labelAddRequest'] == null) {
            throw new runtime.RequiredError(
                'labelAddRequest',
                'Required parameter "labelAddRequest" was null or undefined when calling addLabelDocumentLabelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/label/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelAddRequestToJSON(requestParameters['labelAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelResponseFromJSON(jsonValue));
    }

    /**
     * Add Label
     */
    async addLabelDocumentLabelCreatePost(requestParameters: AddLabelDocumentLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLabelResponse> {
        const response = await this.addLabelDocumentLabelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Ai Summary
     */
    async createAiSummaryDocumentAiSummaryPostRaw(requestParameters: CreateAiSummaryDocumentAiSummaryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['documentAiSummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'documentAiSummaryRequest',
                'Required parameter "documentAiSummaryRequest" was null or undefined when calling createAiSummaryDocumentAiSummaryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/ai/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentAiSummaryRequestToJSON(requestParameters['documentAiSummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Create Ai Summary
     */
    async createAiSummaryDocumentAiSummaryPost(requestParameters: CreateAiSummaryDocumentAiSummaryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.createAiSummaryDocumentAiSummaryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Document
     */
    async createDocumentDocumentCreatePostRaw(requestParameters: CreateDocumentDocumentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCreateResponse>> {
        if (requestParameters['documentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'documentCreateRequest',
                'Required parameter "documentCreateRequest" was null or undefined when calling createDocumentDocumentCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCreateRequestToJSON(requestParameters['documentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Document
     */
    async createDocumentDocumentCreatePost(requestParameters: CreateDocumentDocumentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCreateResponse> {
        const response = await this.createDocumentDocumentCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Note
     */
    async createNoteDocumentNoteCreatePostRaw(requestParameters: CreateNoteDocumentNoteCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['documentNoteCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'documentNoteCreateRequest',
                'Required parameter "documentNoteCreateRequest" was null or undefined when calling createNoteDocumentNoteCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/note/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentNoteCreateRequestToJSON(requestParameters['documentNoteCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Create Note
     */
    async createNoteDocumentNoteCreatePost(requestParameters: CreateNoteDocumentNoteCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.createNoteDocumentNoteCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Document
     */
    async deleteDocumentDocumentDeletePostRaw(requestParameters: DeleteDocumentDocumentDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['documentDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'documentDeleteRequest',
                'Required parameter "documentDeleteRequest" was null or undefined when calling deleteDocumentDocumentDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentDeleteRequestToJSON(requestParameters['documentDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete Document
     */
    async deleteDocumentDocumentDeletePost(requestParameters: DeleteDocumentDocumentDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteDocumentDocumentDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Label
     */
    async deleteLabelDocumentLabelDeletePostRaw(requestParameters: DeleteLabelDocumentLabelDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['labelDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'labelDeleteRequest',
                'Required parameter "labelDeleteRequest" was null or undefined when calling deleteLabelDocumentLabelDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/label/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelDeleteRequestToJSON(requestParameters['labelDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Label
     */
    async deleteLabelDocumentLabelDeletePost(requestParameters: DeleteLabelDocumentLabelDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteLabelDocumentLabelDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Note
     */
    async deleteNoteDocumentNoteDeletePostRaw(requestParameters: DeleteNoteDocumentNoteDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['documentNoteDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'documentNoteDeleteRequest',
                'Required parameter "documentNoteDeleteRequest" was null or undefined when calling deleteNoteDocumentNoteDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/note/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentNoteDeleteRequestToJSON(requestParameters['documentNoteDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Note
     */
    async deleteNoteDocumentNoteDeletePost(requestParameters: DeleteNoteDocumentNoteDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteNoteDocumentNoteDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document Detail
     */
    async getDocumentDetailDocumentDetailPostRaw(requestParameters: GetDocumentDetailDocumentDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentDetailResponse>> {
        if (requestParameters['documentDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'documentDetailRequest',
                'Required parameter "documentDetailRequest" was null or undefined when calling getDocumentDetailDocumentDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentDetailRequestToJSON(requestParameters['documentDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentDetailResponseFromJSON(jsonValue));
    }

    /**
     * Get Document Detail
     */
    async getDocumentDetailDocumentDetailPost(requestParameters: GetDocumentDetailDocumentDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentDetailResponse> {
        const response = await this.getDocumentDetailDocumentDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Label Summary
     */
    async getLabelSummaryDocumentLabelSummaryPostRaw(requestParameters: GetLabelSummaryDocumentLabelSummaryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelSummaryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/label/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Get Label Summary
     */
    async getLabelSummaryDocumentLabelSummaryPost(requestParameters: GetLabelSummaryDocumentLabelSummaryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelSummaryResponse> {
        const response = await this.getLabelSummaryDocumentLabelSummaryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Month Summary
     */
    async getMonthSummaryDocumentMonthSummaryPostRaw(requestParameters: GetMonthSummaryDocumentMonthSummaryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentMonthSummaryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/month/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentMonthSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Get Month Summary
     */
    async getMonthSummaryDocumentMonthSummaryPost(requestParameters: GetMonthSummaryDocumentMonthSummaryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentMonthSummaryResponse> {
        const response = await this.getMonthSummaryDocumentMonthSummaryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Label
     */
    async listLabelDocumentLabelListPostRaw(requestParameters: ListLabelDocumentLabelListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/label/list`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelListResponseFromJSON(jsonValue));
    }

    /**
     * List Label
     */
    async listLabelDocumentLabelListPost(requestParameters: ListLabelDocumentLabelListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelListResponse> {
        const response = await this.listLabelDocumentLabelListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Document
     */
    async readDocumentDocumentReadPostRaw(requestParameters: ReadDocumentDocumentReadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['readRequest'] == null) {
            throw new runtime.RequiredError(
                'readRequest',
                'Required parameter "readRequest" was null or undefined when calling readDocumentDocumentReadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/read`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadRequestToJSON(requestParameters['readRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Read Document
     */
    async readDocumentDocumentReadPost(requestParameters: ReadDocumentDocumentReadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.readDocumentDocumentReadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Recent Read Document
     */
    async recentReadDocumentDocumentRecentSearchPostRaw(requestParameters: RecentReadDocumentDocumentRecentSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionDocumentInfo>> {
        if (requestParameters['searchRecentReadRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRecentReadRequest',
                'Required parameter "searchRecentReadRequest" was null or undefined when calling recentReadDocumentDocumentRecentSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/recent/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRecentReadRequestToJSON(requestParameters['searchRecentReadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionDocumentInfoFromJSON(jsonValue));
    }

    /**
     * Recent Read Document
     */
    async recentReadDocumentDocumentRecentSearchPost(requestParameters: RecentReadDocumentDocumentRecentSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionDocumentInfo> {
        const response = await this.recentReadDocumentDocumentRecentSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search All Mine Documents
     */
    async searchAllMineDocumentsDocumentSearchMinePostRaw(requestParameters: SearchAllMineDocumentsDocumentSearchMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionDocumentInfo>> {
        if (requestParameters['searchAllMyDocumentsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchAllMyDocumentsRequest',
                'Required parameter "searchAllMyDocumentsRequest" was null or undefined when calling searchAllMineDocumentsDocumentSearchMinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/search/mine`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchAllMyDocumentsRequestToJSON(requestParameters['searchAllMyDocumentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionDocumentInfoFromJSON(jsonValue));
    }

    /**
     * Search All Mine Documents
     */
    async searchAllMineDocumentsDocumentSearchMinePost(requestParameters: SearchAllMineDocumentsDocumentSearchMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionDocumentInfo> {
        const response = await this.searchAllMineDocumentsDocumentSearchMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Knowledge Vector
     */
    async searchKnowledgeVectorDocumentVectorSearchPostRaw(requestParameters: SearchKnowledgeVectorDocumentVectorSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VectorSearchResponse>> {
        if (requestParameters['vectorSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'vectorSearchRequest',
                'Required parameter "vectorSearchRequest" was null or undefined when calling searchKnowledgeVectorDocumentVectorSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/vector/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VectorSearchRequestToJSON(requestParameters['vectorSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VectorSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search Knowledge Vector
     */
    async searchKnowledgeVectorDocumentVectorSearchPost(requestParameters: SearchKnowledgeVectorDocumentVectorSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VectorSearchResponse> {
        const response = await this.searchKnowledgeVectorDocumentVectorSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search My Star Documents
     */
    async searchMyStarDocumentsDocumentStarSearchPostRaw(requestParameters: SearchMyStarDocumentsDocumentStarSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionDocumentInfo>> {
        if (requestParameters['searchMyStarDocumentsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchMyStarDocumentsRequest',
                'Required parameter "searchMyStarDocumentsRequest" was null or undefined when calling searchMyStarDocumentsDocumentStarSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/star/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchMyStarDocumentsRequestToJSON(requestParameters['searchMyStarDocumentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionDocumentInfoFromJSON(jsonValue));
    }

    /**
     * Search My Star Documents
     */
    async searchMyStarDocumentsDocumentStarSearchPost(requestParameters: SearchMyStarDocumentsDocumentStarSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionDocumentInfo> {
        const response = await this.searchMyStarDocumentsDocumentStarSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search User Unread Documents
     */
    async searchUserUnreadDocumentsDocumentUnreadSearchPostRaw(requestParameters: SearchUserUnreadDocumentsDocumentUnreadSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionDocumentInfo>> {
        if (requestParameters['searchUnreadListRequest'] == null) {
            throw new runtime.RequiredError(
                'searchUnreadListRequest',
                'Required parameter "searchUnreadListRequest" was null or undefined when calling searchUserUnreadDocumentsDocumentUnreadSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/unread/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchUnreadListRequestToJSON(requestParameters['searchUnreadListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionDocumentInfoFromJSON(jsonValue));
    }

    /**
     * Search User Unread Documents
     */
    async searchUserUnreadDocumentsDocumentUnreadSearchPost(requestParameters: SearchUserUnreadDocumentsDocumentUnreadSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionDocumentInfo> {
        const response = await this.searchUserUnreadDocumentsDocumentUnreadSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Star Document
     */
    async starDocumentDocumentStarPostRaw(requestParameters: StarDocumentDocumentStarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['starRequest'] == null) {
            throw new runtime.RequiredError(
                'starRequest',
                'Required parameter "starRequest" was null or undefined when calling starDocumentDocumentStarPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/star`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StarRequestToJSON(requestParameters['starRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Star Document
     */
    async starDocumentDocumentStarPost(requestParameters: StarDocumentDocumentStarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.starDocumentDocumentStarPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transform Markdown
     */
    async transformMarkdownDocumentMarkdownTransformPostRaw(requestParameters: TransformMarkdownDocumentMarkdownTransformPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['documentMarkdownTransformRequest'] == null) {
            throw new runtime.RequiredError(
                'documentMarkdownTransformRequest',
                'Required parameter "documentMarkdownTransformRequest" was null or undefined when calling transformMarkdownDocumentMarkdownTransformPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/markdown/transform`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentMarkdownTransformRequestToJSON(requestParameters['documentMarkdownTransformRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Transform Markdown
     */
    async transformMarkdownDocumentMarkdownTransformPost(requestParameters: TransformMarkdownDocumentMarkdownTransformPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.transformMarkdownDocumentMarkdownTransformPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Document
     */
    async updateDocumentDocumentUpdatePostRaw(requestParameters: UpdateDocumentDocumentUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['documentUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'documentUpdateRequest',
                'Required parameter "documentUpdateRequest" was null or undefined when calling updateDocumentDocumentUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentUpdateRequestToJSON(requestParameters['documentUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Document
     */
    async updateDocumentDocumentUpdatePost(requestParameters: UpdateDocumentDocumentUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateDocumentDocumentUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Note
     */
    async updateNoteDocumentNoteSearchPostRaw(requestParameters: UpdateNoteDocumentNoteSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionDocumentNoteInfo>> {
        if (requestParameters['searchDocumentNoteRequest'] == null) {
            throw new runtime.RequiredError(
                'searchDocumentNoteRequest',
                'Required parameter "searchDocumentNoteRequest" was null or undefined when calling updateNoteDocumentNoteSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/document/note/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchDocumentNoteRequestToJSON(requestParameters['searchDocumentNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionDocumentNoteInfoFromJSON(jsonValue));
    }

    /**
     * Update Note
     */
    async updateNoteDocumentNoteSearchPost(requestParameters: UpdateNoteDocumentNoteSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionDocumentNoteInfo> {
        const response = await this.updateNoteDocumentNoteSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
