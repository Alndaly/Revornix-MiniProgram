/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddRssServerRequest,
  AddRssServerResponse,
  DeleteRssServerRequest,
  GetRssServerDetailRequest,
  GetRssServerDocumentRequest,
  HTTPValidationError,
  InifiniteScrollPagnitionDocumentInfo,
  InifiniteScrollPagnitionRssServerInfo,
  NormalResponse,
  RssServerInfo,
  SearchRssServerRequest,
  UpdateRssServerRequest,
} from '../models/index';
import {
    AddRssServerRequestFromJSON,
    AddRssServerRequestToJSON,
    AddRssServerResponseFromJSON,
    AddRssServerResponseToJSON,
    DeleteRssServerRequestFromJSON,
    DeleteRssServerRequestToJSON,
    GetRssServerDetailRequestFromJSON,
    GetRssServerDetailRequestToJSON,
    GetRssServerDocumentRequestFromJSON,
    GetRssServerDocumentRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InifiniteScrollPagnitionDocumentInfoFromJSON,
    InifiniteScrollPagnitionDocumentInfoToJSON,
    InifiniteScrollPagnitionRssServerInfoFromJSON,
    InifiniteScrollPagnitionRssServerInfoToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    RssServerInfoFromJSON,
    RssServerInfoToJSON,
    SearchRssServerRequestFromJSON,
    SearchRssServerRequestToJSON,
    UpdateRssServerRequestFromJSON,
    UpdateRssServerRequestToJSON,
} from '../models/index';

export interface AddRssServerRssAddPostRequest {
    addRssServerRequest: AddRssServerRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteRssServerRssDeletePostRequest {
    deleteRssServerRequest: DeleteRssServerRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetRssServerDetailRssDetailPostRequest {
    getRssServerDetailRequest: GetRssServerDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetRssServerDocumentRssDocumentPostRequest {
    getRssServerDocumentRequest: GetRssServerDocumentRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchRssServerRssSearchPostRequest {
    searchRssServerRequest: SearchRssServerRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateRssServerRssUpdatePostRequest {
    updateRssServerRequest: UpdateRssServerRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class RssApi extends runtime.BaseAPI {

    /**
     * Addrssserver
     */
    async addRssServerRssAddPostRaw(requestParameters: AddRssServerRssAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddRssServerResponse>> {
        if (requestParameters['addRssServerRequest'] == null) {
            throw new runtime.RequiredError(
                'addRssServerRequest',
                'Required parameter "addRssServerRequest" was null or undefined when calling addRssServerRssAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/rss/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRssServerRequestToJSON(requestParameters['addRssServerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddRssServerResponseFromJSON(jsonValue));
    }

    /**
     * Addrssserver
     */
    async addRssServerRssAddPost(requestParameters: AddRssServerRssAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddRssServerResponse> {
        const response = await this.addRssServerRssAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deleterssserver
     */
    async deleteRssServerRssDeletePostRaw(requestParameters: DeleteRssServerRssDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteRssServerRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteRssServerRequest',
                'Required parameter "deleteRssServerRequest" was null or undefined when calling deleteRssServerRssDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/rss/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRssServerRequestToJSON(requestParameters['deleteRssServerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Deleterssserver
     */
    async deleteRssServerRssDeletePost(requestParameters: DeleteRssServerRssDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteRssServerRssDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getrssserverdetail
     */
    async getRssServerDetailRssDetailPostRaw(requestParameters: GetRssServerDetailRssDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RssServerInfo>> {
        if (requestParameters['getRssServerDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'getRssServerDetailRequest',
                'Required parameter "getRssServerDetailRequest" was null or undefined when calling getRssServerDetailRssDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/rss/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetRssServerDetailRequestToJSON(requestParameters['getRssServerDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RssServerInfoFromJSON(jsonValue));
    }

    /**
     * Getrssserverdetail
     */
    async getRssServerDetailRssDetailPost(requestParameters: GetRssServerDetailRssDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RssServerInfo> {
        const response = await this.getRssServerDetailRssDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getrssserverdocument
     */
    async getRssServerDocumentRssDocumentPostRaw(requestParameters: GetRssServerDocumentRssDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionDocumentInfo>> {
        if (requestParameters['getRssServerDocumentRequest'] == null) {
            throw new runtime.RequiredError(
                'getRssServerDocumentRequest',
                'Required parameter "getRssServerDocumentRequest" was null or undefined when calling getRssServerDocumentRssDocumentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/rss/document`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetRssServerDocumentRequestToJSON(requestParameters['getRssServerDocumentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionDocumentInfoFromJSON(jsonValue));
    }

    /**
     * Getrssserverdocument
     */
    async getRssServerDocumentRssDocumentPost(requestParameters: GetRssServerDocumentRssDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionDocumentInfo> {
        const response = await this.getRssServerDocumentRssDocumentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchrssserver
     */
    async searchRssServerRssSearchPostRaw(requestParameters: SearchRssServerRssSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionRssServerInfo>> {
        if (requestParameters['searchRssServerRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRssServerRequest',
                'Required parameter "searchRssServerRequest" was null or undefined when calling searchRssServerRssSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/rss/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRssServerRequestToJSON(requestParameters['searchRssServerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionRssServerInfoFromJSON(jsonValue));
    }

    /**
     * Searchrssserver
     */
    async searchRssServerRssSearchPost(requestParameters: SearchRssServerRssSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionRssServerInfo> {
        const response = await this.searchRssServerRssSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updaterssserver
     */
    async updateRssServerRssUpdatePostRaw(requestParameters: UpdateRssServerRssUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['updateRssServerRequest'] == null) {
            throw new runtime.RequiredError(
                'updateRssServerRequest',
                'Required parameter "updateRssServerRequest" was null or undefined when calling updateRssServerRssUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/rss/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRssServerRequestToJSON(requestParameters['updateRssServerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Updaterssserver
     */
    async updateRssServerRssUpdatePost(requestParameters: UpdateRssServerRssUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateRssServerRssUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
