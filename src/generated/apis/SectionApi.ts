/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllMySectionsResponse,
  CreateLabelResponse,
  DaySectionRequest,
  DaySectionResponse,
  HTTPValidationError,
  InifiniteScrollPagnitionSectionCommentInfo,
  InifiniteScrollPagnitionSectionDocumentInfo,
  InifiniteScrollPagnitionSectionInfo,
  LabelAddRequest,
  LabelDeleteRequest,
  LabelListResponse,
  NormalResponse,
  SearchMineSectionsRequest,
  SearchPublicSectionsRequest,
  SearchSubscribedSectionRequest,
  SearchUserSectionsRequest,
  SectionCommentCreateRequest,
  SectionCommentDeleteRequest,
  SectionCommentSearchRequest,
  SectionCreateRequest,
  SectionCreateResponse,
  SectionDeleteRequest,
  SectionDetailRequest,
  SectionDocumentRequest,
  SectionInfo,
  SectionPublishGetRequest,
  SectionPublishGetResponse,
  SectionPublishRequest,
  SectionRePublishRequest,
  SectionSeoDetailRequest,
  SectionSubscribeRequest,
  SectionUpdateRequest,
  SectionUserAddRequest,
  SectionUserDeleteRequest,
  SectionUserModifyRequest,
  SectionUserRequest,
  SectionUserResponse,
} from '../models/index';
import {
    AllMySectionsResponseFromJSON,
    AllMySectionsResponseToJSON,
    CreateLabelResponseFromJSON,
    CreateLabelResponseToJSON,
    DaySectionRequestFromJSON,
    DaySectionRequestToJSON,
    DaySectionResponseFromJSON,
    DaySectionResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InifiniteScrollPagnitionSectionCommentInfoFromJSON,
    InifiniteScrollPagnitionSectionCommentInfoToJSON,
    InifiniteScrollPagnitionSectionDocumentInfoFromJSON,
    InifiniteScrollPagnitionSectionDocumentInfoToJSON,
    InifiniteScrollPagnitionSectionInfoFromJSON,
    InifiniteScrollPagnitionSectionInfoToJSON,
    LabelAddRequestFromJSON,
    LabelAddRequestToJSON,
    LabelDeleteRequestFromJSON,
    LabelDeleteRequestToJSON,
    LabelListResponseFromJSON,
    LabelListResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    SearchMineSectionsRequestFromJSON,
    SearchMineSectionsRequestToJSON,
    SearchPublicSectionsRequestFromJSON,
    SearchPublicSectionsRequestToJSON,
    SearchSubscribedSectionRequestFromJSON,
    SearchSubscribedSectionRequestToJSON,
    SearchUserSectionsRequestFromJSON,
    SearchUserSectionsRequestToJSON,
    SectionCommentCreateRequestFromJSON,
    SectionCommentCreateRequestToJSON,
    SectionCommentDeleteRequestFromJSON,
    SectionCommentDeleteRequestToJSON,
    SectionCommentSearchRequestFromJSON,
    SectionCommentSearchRequestToJSON,
    SectionCreateRequestFromJSON,
    SectionCreateRequestToJSON,
    SectionCreateResponseFromJSON,
    SectionCreateResponseToJSON,
    SectionDeleteRequestFromJSON,
    SectionDeleteRequestToJSON,
    SectionDetailRequestFromJSON,
    SectionDetailRequestToJSON,
    SectionDocumentRequestFromJSON,
    SectionDocumentRequestToJSON,
    SectionInfoFromJSON,
    SectionInfoToJSON,
    SectionPublishGetRequestFromJSON,
    SectionPublishGetRequestToJSON,
    SectionPublishGetResponseFromJSON,
    SectionPublishGetResponseToJSON,
    SectionPublishRequestFromJSON,
    SectionPublishRequestToJSON,
    SectionRePublishRequestFromJSON,
    SectionRePublishRequestToJSON,
    SectionSeoDetailRequestFromJSON,
    SectionSeoDetailRequestToJSON,
    SectionSubscribeRequestFromJSON,
    SectionSubscribeRequestToJSON,
    SectionUpdateRequestFromJSON,
    SectionUpdateRequestToJSON,
    SectionUserAddRequestFromJSON,
    SectionUserAddRequestToJSON,
    SectionUserDeleteRequestFromJSON,
    SectionUserDeleteRequestToJSON,
    SectionUserModifyRequestFromJSON,
    SectionUserModifyRequestToJSON,
    SectionUserRequestFromJSON,
    SectionUserRequestToJSON,
    SectionUserResponseFromJSON,
    SectionUserResponseToJSON,
} from '../models/index';

export interface AddLabelSectionLabelCreatePostRequest {
    labelAddRequest: LabelAddRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateSectionCommentSectionCommentCreatePostRequest {
    sectionCommentCreateRequest: SectionCommentCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface CreateSectionSectionCreatePostRequest {
    sectionCreateRequest: SectionCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteLabelSectionLabelDeletePostRequest {
    labelDeleteRequest: LabelDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteSectionCommentSectionCommentDeletePostRequest {
    sectionCommentDeleteRequest: SectionCommentDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteSectionSectionDeletePostRequest {
    sectionDeleteRequest: SectionDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteSectionUserSectionUserDeletePostRequest {
    sectionUserDeleteRequest: SectionUserDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetAllMineSectionsSectionMineAllPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetDateSectionInfoSectionDatePostRequest {
    daySectionRequest: DaySectionRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetMySubscribedSectionsSectionSubscribedPostRequest {
    searchSubscribedSectionRequest: SearchSubscribedSectionRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetSectionDetailSectionDetailPostRequest {
    sectionDetailRequest: SectionDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ListLabelSectionLabelListPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchMineSectionsSectionMineSearchPostRequest {
    searchMineSectionsRequest: SearchMineSectionsRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchPublicSectionsSectionPublicSearchPostRequest {
    searchPublicSectionsRequest: SearchPublicSectionsRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchSectionCommentSectionCommentSearchPostRequest {
    sectionCommentSearchRequest: SectionCommentSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchUserSectionsSectionUserSearchPostRequest {
    searchUserSectionsRequest: SearchUserSectionsRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionDocumentRequestSectionDocumentsPostRequest {
    sectionDocumentRequest: SectionDocumentRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionPublishGetRequestSectionPublishGetPostRequest {
    sectionPublishGetRequest: SectionPublishGetRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionPublishRequestSectionPublishPostRequest {
    sectionPublishRequest: SectionPublishRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionRepublishSectionRepublishPostRequest {
    sectionRePublishRequest: SectionRePublishRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionSeoDetailRequestSectionDetailSeoPostRequest {
    sectionSeoDetailRequest: SectionSeoDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionUserAddRequestSectionUserAddPostRequest {
    sectionUserAddRequest: SectionUserAddRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionUserModifyRequestSectionUserModifyPostRequest {
    sectionUserModifyRequest: SectionUserModifyRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionUserRequestSectionUserPostRequest {
    sectionUserRequest: SectionUserRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SubscribeSectionSectionSubscribePostRequest {
    sectionSubscribeRequest: SectionSubscribeRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateSectionSectionUpdatePostRequest {
    sectionUpdateRequest: SectionUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class SectionApi extends runtime.BaseAPI {

    /**
     * Add Label
     */
    async addLabelSectionLabelCreatePostRaw(requestParameters: AddLabelSectionLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLabelResponse>> {
        if (requestParameters['labelAddRequest'] == null) {
            throw new runtime.RequiredError(
                'labelAddRequest',
                'Required parameter "labelAddRequest" was null or undefined when calling addLabelSectionLabelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/label/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelAddRequestToJSON(requestParameters['labelAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelResponseFromJSON(jsonValue));
    }

    /**
     * Add Label
     */
    async addLabelSectionLabelCreatePost(requestParameters: AddLabelSectionLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLabelResponse> {
        const response = await this.addLabelSectionLabelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Section Comment
     */
    async createSectionCommentSectionCommentCreatePostRaw(requestParameters: CreateSectionCommentSectionCommentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionCommentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionCommentCreateRequest',
                'Required parameter "sectionCommentCreateRequest" was null or undefined when calling createSectionCommentSectionCommentCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/comment/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionCommentCreateRequestToJSON(requestParameters['sectionCommentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Create Section Comment
     */
    async createSectionCommentSectionCommentCreatePost(requestParameters: CreateSectionCommentSectionCommentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.createSectionCommentSectionCommentCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Section
     */
    async createSectionSectionCreatePostRaw(requestParameters: CreateSectionSectionCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionCreateResponse>> {
        if (requestParameters['sectionCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionCreateRequest',
                'Required parameter "sectionCreateRequest" was null or undefined when calling createSectionSectionCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionCreateRequestToJSON(requestParameters['sectionCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Section
     */
    async createSectionSectionCreatePost(requestParameters: CreateSectionSectionCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionCreateResponse> {
        const response = await this.createSectionSectionCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Label
     */
    async deleteLabelSectionLabelDeletePostRaw(requestParameters: DeleteLabelSectionLabelDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['labelDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'labelDeleteRequest',
                'Required parameter "labelDeleteRequest" was null or undefined when calling deleteLabelSectionLabelDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/label/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelDeleteRequestToJSON(requestParameters['labelDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Label
     */
    async deleteLabelSectionLabelDeletePost(requestParameters: DeleteLabelSectionLabelDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteLabelSectionLabelDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Section Comment
     */
    async deleteSectionCommentSectionCommentDeletePostRaw(requestParameters: DeleteSectionCommentSectionCommentDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionCommentDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionCommentDeleteRequest',
                'Required parameter "sectionCommentDeleteRequest" was null or undefined when calling deleteSectionCommentSectionCommentDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/comment/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionCommentDeleteRequestToJSON(requestParameters['sectionCommentDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Section Comment
     */
    async deleteSectionCommentSectionCommentDeletePost(requestParameters: DeleteSectionCommentSectionCommentDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteSectionCommentSectionCommentDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Section
     */
    async deleteSectionSectionDeletePostRaw(requestParameters: DeleteSectionSectionDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionDeleteRequest',
                'Required parameter "sectionDeleteRequest" was null or undefined when calling deleteSectionSectionDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionDeleteRequestToJSON(requestParameters['sectionDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Section
     */
    async deleteSectionSectionDeletePost(requestParameters: DeleteSectionSectionDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteSectionSectionDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Section User
     */
    async deleteSectionUserSectionUserDeletePostRaw(requestParameters: DeleteSectionUserSectionUserDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionUserDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionUserDeleteRequest',
                'Required parameter "sectionUserDeleteRequest" was null or undefined when calling deleteSectionUserSectionUserDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/user/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionUserDeleteRequestToJSON(requestParameters['sectionUserDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Section User
     */
    async deleteSectionUserSectionUserDeletePost(requestParameters: DeleteSectionUserSectionUserDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteSectionUserSectionUserDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Mine Sections
     */
    async getAllMineSectionsSectionMineAllPostRaw(requestParameters: GetAllMineSectionsSectionMineAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllMySectionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/mine/all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllMySectionsResponseFromJSON(jsonValue));
    }

    /**
     * Get All Mine Sections
     */
    async getAllMineSectionsSectionMineAllPost(requestParameters: GetAllMineSectionsSectionMineAllPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllMySectionsResponse> {
        const response = await this.getAllMineSectionsSectionMineAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Date Section Info
     */
    async getDateSectionInfoSectionDatePostRaw(requestParameters: GetDateSectionInfoSectionDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DaySectionResponse>> {
        if (requestParameters['daySectionRequest'] == null) {
            throw new runtime.RequiredError(
                'daySectionRequest',
                'Required parameter "daySectionRequest" was null or undefined when calling getDateSectionInfoSectionDatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/date`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DaySectionRequestToJSON(requestParameters['daySectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DaySectionResponseFromJSON(jsonValue));
    }

    /**
     * Get Date Section Info
     */
    async getDateSectionInfoSectionDatePost(requestParameters: GetDateSectionInfoSectionDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DaySectionResponse> {
        const response = await this.getDateSectionInfoSectionDatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get My Subscribed Sections
     */
    async getMySubscribedSectionsSectionSubscribedPostRaw(requestParameters: GetMySubscribedSectionsSectionSubscribedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionSectionInfo>> {
        if (requestParameters['searchSubscribedSectionRequest'] == null) {
            throw new runtime.RequiredError(
                'searchSubscribedSectionRequest',
                'Required parameter "searchSubscribedSectionRequest" was null or undefined when calling getMySubscribedSectionsSectionSubscribedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/subscribed`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSubscribedSectionRequestToJSON(requestParameters['searchSubscribedSectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionSectionInfoFromJSON(jsonValue));
    }

    /**
     * Get My Subscribed Sections
     */
    async getMySubscribedSectionsSectionSubscribedPost(requestParameters: GetMySubscribedSectionsSectionSubscribedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionSectionInfo> {
        const response = await this.getMySubscribedSectionsSectionSubscribedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Section Detail
     */
    async getSectionDetailSectionDetailPostRaw(requestParameters: GetSectionDetailSectionDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionInfo>> {
        if (requestParameters['sectionDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionDetailRequest',
                'Required parameter "sectionDetailRequest" was null or undefined when calling getSectionDetailSectionDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionDetailRequestToJSON(requestParameters['sectionDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionInfoFromJSON(jsonValue));
    }

    /**
     * Get Section Detail
     */
    async getSectionDetailSectionDetailPost(requestParameters: GetSectionDetailSectionDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionInfo> {
        const response = await this.getSectionDetailSectionDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Label
     */
    async listLabelSectionLabelListPostRaw(requestParameters: ListLabelSectionLabelListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/label/list`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelListResponseFromJSON(jsonValue));
    }

    /**
     * List Label
     */
    async listLabelSectionLabelListPost(requestParameters: ListLabelSectionLabelListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelListResponse> {
        const response = await this.listLabelSectionLabelListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Mine Sections
     */
    async searchMineSectionsSectionMineSearchPostRaw(requestParameters: SearchMineSectionsSectionMineSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionSectionInfo>> {
        if (requestParameters['searchMineSectionsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchMineSectionsRequest',
                'Required parameter "searchMineSectionsRequest" was null or undefined when calling searchMineSectionsSectionMineSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/mine/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchMineSectionsRequestToJSON(requestParameters['searchMineSectionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionSectionInfoFromJSON(jsonValue));
    }

    /**
     * Search Mine Sections
     */
    async searchMineSectionsSectionMineSearchPost(requestParameters: SearchMineSectionsSectionMineSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionSectionInfo> {
        const response = await this.searchMineSectionsSectionMineSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Public Sections
     */
    async searchPublicSectionsSectionPublicSearchPostRaw(requestParameters: SearchPublicSectionsSectionPublicSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionSectionInfo>> {
        if (requestParameters['searchPublicSectionsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchPublicSectionsRequest',
                'Required parameter "searchPublicSectionsRequest" was null or undefined when calling searchPublicSectionsSectionPublicSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/public/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchPublicSectionsRequestToJSON(requestParameters['searchPublicSectionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionSectionInfoFromJSON(jsonValue));
    }

    /**
     * Search Public Sections
     */
    async searchPublicSectionsSectionPublicSearchPost(requestParameters: SearchPublicSectionsSectionPublicSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionSectionInfo> {
        const response = await this.searchPublicSectionsSectionPublicSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Section Comment
     */
    async searchSectionCommentSectionCommentSearchPostRaw(requestParameters: SearchSectionCommentSectionCommentSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionSectionCommentInfo>> {
        if (requestParameters['sectionCommentSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionCommentSearchRequest',
                'Required parameter "sectionCommentSearchRequest" was null or undefined when calling searchSectionCommentSectionCommentSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/comment/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionCommentSearchRequestToJSON(requestParameters['sectionCommentSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionSectionCommentInfoFromJSON(jsonValue));
    }

    /**
     * Search Section Comment
     */
    async searchSectionCommentSectionCommentSearchPost(requestParameters: SearchSectionCommentSectionCommentSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionSectionCommentInfo> {
        const response = await this.searchSectionCommentSectionCommentSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search User Sections
     */
    async searchUserSectionsSectionUserSearchPostRaw(requestParameters: SearchUserSectionsSectionUserSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionSectionInfo>> {
        if (requestParameters['searchUserSectionsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchUserSectionsRequest',
                'Required parameter "searchUserSectionsRequest" was null or undefined when calling searchUserSectionsSectionUserSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/user/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchUserSectionsRequestToJSON(requestParameters['searchUserSectionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionSectionInfoFromJSON(jsonValue));
    }

    /**
     * Search User Sections
     */
    async searchUserSectionsSectionUserSearchPost(requestParameters: SearchUserSectionsSectionUserSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionSectionInfo> {
        const response = await this.searchUserSectionsSectionUserSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section Document Request
     */
    async sectionDocumentRequestSectionDocumentsPostRaw(requestParameters: SectionDocumentRequestSectionDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionSectionDocumentInfo>> {
        if (requestParameters['sectionDocumentRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionDocumentRequest',
                'Required parameter "sectionDocumentRequest" was null or undefined when calling sectionDocumentRequestSectionDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionDocumentRequestToJSON(requestParameters['sectionDocumentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionSectionDocumentInfoFromJSON(jsonValue));
    }

    /**
     * Section Document Request
     */
    async sectionDocumentRequestSectionDocumentsPost(requestParameters: SectionDocumentRequestSectionDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionSectionDocumentInfo> {
        const response = await this.sectionDocumentRequestSectionDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section Publish Get Request
     */
    async sectionPublishGetRequestSectionPublishGetPostRaw(requestParameters: SectionPublishGetRequestSectionPublishGetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionPublishGetResponse>> {
        if (requestParameters['sectionPublishGetRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionPublishGetRequest',
                'Required parameter "sectionPublishGetRequest" was null or undefined when calling sectionPublishGetRequestSectionPublishGetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/publish/get`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionPublishGetRequestToJSON(requestParameters['sectionPublishGetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionPublishGetResponseFromJSON(jsonValue));
    }

    /**
     * Section Publish Get Request
     */
    async sectionPublishGetRequestSectionPublishGetPost(requestParameters: SectionPublishGetRequestSectionPublishGetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionPublishGetResponse> {
        const response = await this.sectionPublishGetRequestSectionPublishGetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section Publish Request
     */
    async sectionPublishRequestSectionPublishPostRaw(requestParameters: SectionPublishRequestSectionPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionPublishRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionPublishRequest',
                'Required parameter "sectionPublishRequest" was null or undefined when calling sectionPublishRequestSectionPublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionPublishRequestToJSON(requestParameters['sectionPublishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Section Publish Request
     */
    async sectionPublishRequestSectionPublishPost(requestParameters: SectionPublishRequestSectionPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.sectionPublishRequestSectionPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section Republish
     */
    async sectionRepublishSectionRepublishPostRaw(requestParameters: SectionRepublishSectionRepublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionRePublishRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionRePublishRequest',
                'Required parameter "sectionRePublishRequest" was null or undefined when calling sectionRepublishSectionRepublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/republish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionRePublishRequestToJSON(requestParameters['sectionRePublishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Section Republish
     */
    async sectionRepublishSectionRepublishPost(requestParameters: SectionRepublishSectionRepublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.sectionRepublishSectionRepublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section Seo Detail Request
     */
    async sectionSeoDetailRequestSectionDetailSeoPostRaw(requestParameters: SectionSeoDetailRequestSectionDetailSeoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionInfo>> {
        if (requestParameters['sectionSeoDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionSeoDetailRequest',
                'Required parameter "sectionSeoDetailRequest" was null or undefined when calling sectionSeoDetailRequestSectionDetailSeoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/detail/seo`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionSeoDetailRequestToJSON(requestParameters['sectionSeoDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionInfoFromJSON(jsonValue));
    }

    /**
     * Section Seo Detail Request
     */
    async sectionSeoDetailRequestSectionDetailSeoPost(requestParameters: SectionSeoDetailRequestSectionDetailSeoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionInfo> {
        const response = await this.sectionSeoDetailRequestSectionDetailSeoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section User Add Request
     */
    async sectionUserAddRequestSectionUserAddPostRaw(requestParameters: SectionUserAddRequestSectionUserAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionUserAddRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionUserAddRequest',
                'Required parameter "sectionUserAddRequest" was null or undefined when calling sectionUserAddRequestSectionUserAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/user/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionUserAddRequestToJSON(requestParameters['sectionUserAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Section User Add Request
     */
    async sectionUserAddRequestSectionUserAddPost(requestParameters: SectionUserAddRequestSectionUserAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.sectionUserAddRequestSectionUserAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section User Modify Request
     */
    async sectionUserModifyRequestSectionUserModifyPostRaw(requestParameters: SectionUserModifyRequestSectionUserModifyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionUserModifyRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionUserModifyRequest',
                'Required parameter "sectionUserModifyRequest" was null or undefined when calling sectionUserModifyRequestSectionUserModifyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/user/modify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionUserModifyRequestToJSON(requestParameters['sectionUserModifyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Section User Modify Request
     */
    async sectionUserModifyRequestSectionUserModifyPost(requestParameters: SectionUserModifyRequestSectionUserModifyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.sectionUserModifyRequestSectionUserModifyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section User Request
     */
    async sectionUserRequestSectionUserPostRaw(requestParameters: SectionUserRequestSectionUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionUserResponse>> {
        if (requestParameters['sectionUserRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionUserRequest',
                'Required parameter "sectionUserRequest" was null or undefined when calling sectionUserRequestSectionUserPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/user`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionUserRequestToJSON(requestParameters['sectionUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionUserResponseFromJSON(jsonValue));
    }

    /**
     * Section User Request
     */
    async sectionUserRequestSectionUserPost(requestParameters: SectionUserRequestSectionUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionUserResponse> {
        const response = await this.sectionUserRequestSectionUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe Section
     */
    async subscribeSectionSectionSubscribePostRaw(requestParameters: SubscribeSectionSectionSubscribePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionSubscribeRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionSubscribeRequest',
                'Required parameter "sectionSubscribeRequest" was null or undefined when calling subscribeSectionSectionSubscribePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/subscribe`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionSubscribeRequestToJSON(requestParameters['sectionSubscribeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Subscribe Section
     */
    async subscribeSectionSectionSubscribePost(requestParameters: SubscribeSectionSectionSubscribePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.subscribeSectionSectionSubscribePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Section
     */
    async updateSectionSectionUpdatePostRaw(requestParameters: UpdateSectionSectionUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['sectionUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionUpdateRequest',
                'Required parameter "sectionUpdateRequest" was null or undefined when calling updateSectionSectionUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/section/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionUpdateRequestToJSON(requestParameters['sectionUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Section
     */
    async updateSectionSectionUpdatePost(requestParameters: UpdateSectionSectionUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateSectionSectionUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
