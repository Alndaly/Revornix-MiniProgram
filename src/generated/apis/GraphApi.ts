/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentGraphRequest,
  GraphResponse,
  HTTPValidationError,
  SectionGraphRequest,
} from '../models/index';
import {
    DocumentGraphRequestFromJSON,
    DocumentGraphRequestToJSON,
    GraphResponseFromJSON,
    GraphResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SectionGraphRequestFromJSON,
    SectionGraphRequestToJSON,
} from '../models/index';

export interface DocumentGraphGraphDocumentPostRequest {
    documentGraphRequest: DocumentGraphRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GraphGraphSearchPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SectionGraphGraphSectionPostRequest {
    sectionGraphRequest: SectionGraphRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class GraphApi extends runtime.BaseAPI {

    /**
     * Document Graph
     */
    async documentGraphGraphDocumentPostRaw(requestParameters: DocumentGraphGraphDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraphResponse>> {
        if (requestParameters['documentGraphRequest'] == null) {
            throw new runtime.RequiredError(
                'documentGraphRequest',
                'Required parameter "documentGraphRequest" was null or undefined when calling documentGraphGraphDocumentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/graph/document`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentGraphRequestToJSON(requestParameters['documentGraphRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphResponseFromJSON(jsonValue));
    }

    /**
     * Document Graph
     */
    async documentGraphGraphDocumentPost(requestParameters: DocumentGraphGraphDocumentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraphResponse> {
        const response = await this.documentGraphGraphDocumentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Graph
     */
    async graphGraphSearchPostRaw(requestParameters: GraphGraphSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraphResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/graph/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphResponseFromJSON(jsonValue));
    }

    /**
     * Graph
     */
    async graphGraphSearchPost(requestParameters: GraphGraphSearchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraphResponse> {
        const response = await this.graphGraphSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Section Graph
     */
    async sectionGraphGraphSectionPostRaw(requestParameters: SectionGraphGraphSectionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraphResponse>> {
        if (requestParameters['sectionGraphRequest'] == null) {
            throw new runtime.RequiredError(
                'sectionGraphRequest',
                'Required parameter "sectionGraphRequest" was null or undefined when calling sectionGraphGraphSectionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/graph/section`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionGraphRequestToJSON(requestParameters['sectionGraphRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphResponseFromJSON(jsonValue));
    }

    /**
     * Section Graph
     */
    async sectionGraphGraphSectionPost(requestParameters: SectionGraphGraphSectionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraphResponse> {
        const response = await this.sectionGraphGraphSectionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
