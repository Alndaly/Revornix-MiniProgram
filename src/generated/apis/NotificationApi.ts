/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddNotificationSourceRequest,
  AddNotificationTargetRequest,
  AddNotificationTaskRequest,
  DeleteNotificationRecordRequest,
  DeleteNotificationSourceRequest,
  DeleteNotificationTargetRequest,
  DeleteNotificationTaskRequest,
  HTTPValidationError,
  InifiniteScrollPagnitionNotificationRecord,
  NormalResponse,
  NotificationRecord,
  NotificationRecordDetailRequest,
  NotificationSourceDetail,
  NotificationSourceDetailRequest,
  NotificationSourcesResponse,
  NotificationTargetDetail,
  NotificationTargetDetailRequest,
  NotificationTargetsResponse,
  NotificationTask,
  NotificationTaskDetailRequest,
  NotificationTaskResponse,
  NotificationTemplatesResponse,
  ReadNotificationRecordRequest,
  SearchNotificationRecordRequest,
  UpdateNotificationSourceRequest,
  UpdateNotificationTargetRequest,
  UpdateNotificationTaskRequest,
} from '../models/index';
import {
    AddNotificationSourceRequestFromJSON,
    AddNotificationSourceRequestToJSON,
    AddNotificationTargetRequestFromJSON,
    AddNotificationTargetRequestToJSON,
    AddNotificationTaskRequestFromJSON,
    AddNotificationTaskRequestToJSON,
    DeleteNotificationRecordRequestFromJSON,
    DeleteNotificationRecordRequestToJSON,
    DeleteNotificationSourceRequestFromJSON,
    DeleteNotificationSourceRequestToJSON,
    DeleteNotificationTargetRequestFromJSON,
    DeleteNotificationTargetRequestToJSON,
    DeleteNotificationTaskRequestFromJSON,
    DeleteNotificationTaskRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InifiniteScrollPagnitionNotificationRecordFromJSON,
    InifiniteScrollPagnitionNotificationRecordToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    NotificationRecordFromJSON,
    NotificationRecordToJSON,
    NotificationRecordDetailRequestFromJSON,
    NotificationRecordDetailRequestToJSON,
    NotificationSourceDetailFromJSON,
    NotificationSourceDetailToJSON,
    NotificationSourceDetailRequestFromJSON,
    NotificationSourceDetailRequestToJSON,
    NotificationSourcesResponseFromJSON,
    NotificationSourcesResponseToJSON,
    NotificationTargetDetailFromJSON,
    NotificationTargetDetailToJSON,
    NotificationTargetDetailRequestFromJSON,
    NotificationTargetDetailRequestToJSON,
    NotificationTargetsResponseFromJSON,
    NotificationTargetsResponseToJSON,
    NotificationTaskFromJSON,
    NotificationTaskToJSON,
    NotificationTaskDetailRequestFromJSON,
    NotificationTaskDetailRequestToJSON,
    NotificationTaskResponseFromJSON,
    NotificationTaskResponseToJSON,
    NotificationTemplatesResponseFromJSON,
    NotificationTemplatesResponseToJSON,
    ReadNotificationRecordRequestFromJSON,
    ReadNotificationRecordRequestToJSON,
    SearchNotificationRecordRequestFromJSON,
    SearchNotificationRecordRequestToJSON,
    UpdateNotificationSourceRequestFromJSON,
    UpdateNotificationSourceRequestToJSON,
    UpdateNotificationTargetRequestFromJSON,
    UpdateNotificationTargetRequestToJSON,
    UpdateNotificationTaskRequestFromJSON,
    UpdateNotificationTaskRequestToJSON,
} from '../models/index';

export interface AddEmailSourceNotificationSourceAddPostRequest {
    addNotificationSourceRequest: AddNotificationSourceRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface AddNotificationTargetNotificationTargetAddPostRequest {
    addNotificationTargetRequest: AddNotificationTargetRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface AddNotificationTaskNotificationTaskAddPostRequest {
    addNotificationTaskRequest: AddNotificationTaskRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteEmailSourceNotificationSourceDeletePostRequest {
    deleteNotificationSourceRequest: DeleteNotificationSourceRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteNotificationRecordNotificationRecordDeletePostRequest {
    deleteNotificationRecordRequest: DeleteNotificationRecordRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteNotificationTargetNotificationTargetDeletePostRequest {
    deleteNotificationTargetRequest: DeleteNotificationTargetRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteNotificationTaskNotificationTaskDeletePostRequest {
    deleteNotificationTaskRequest: DeleteNotificationTaskRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetEmailSourceNotificationSourceMinePostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetMineNotificationTargetNotificationTargetMinePostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetMineNotificationTaskNotificationTaskMinePostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetNotificationDetailNotificationSourceDetailPostRequest {
    notificationSourceDetailRequest: NotificationSourceDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetNotificationRecordDetailNotificationRecordDetailPostRequest {
    notificationRecordDetailRequest: NotificationRecordDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetNotificationTargetDetailNotificationTargetDetailPostRequest {
    notificationTargetDetailRequest: NotificationTargetDetailRequest;
}

export interface GetNotificationTaskNotificationTaskDetailPostRequest {
    notificationTaskDetailRequest: NotificationTaskDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetNotificationTemplatesNotificationTemplateAllPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ReadAllNotificationRecordNotificationRecordReadAllPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ReadNotificationRecordNotificationRecordReadPostRequest {
    readNotificationRecordRequest: ReadNotificationRecordRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchNotificationRecordNotificationRecordSearchPostRequest {
    searchNotificationRecordRequest: SearchNotificationRecordRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateEmailSourceNotificationSourceUpdatePostRequest {
    updateNotificationSourceRequest: UpdateNotificationSourceRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateNotificationTargetNotificationTargetUpdatePostRequest {
    updateNotificationTargetRequest: UpdateNotificationTargetRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateNotificationTaskNotificationTaskUpdatePostRequest {
    updateNotificationTaskRequest: UpdateNotificationTaskRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     * Add Email Source
     */
    async addEmailSourceNotificationSourceAddPostRaw(requestParameters: AddEmailSourceNotificationSourceAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['addNotificationSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'addNotificationSourceRequest',
                'Required parameter "addNotificationSourceRequest" was null or undefined when calling addEmailSourceNotificationSourceAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/source/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNotificationSourceRequestToJSON(requestParameters['addNotificationSourceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Add Email Source
     */
    async addEmailSourceNotificationSourceAddPost(requestParameters: AddEmailSourceNotificationSourceAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.addEmailSourceNotificationSourceAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Notification Target
     */
    async addNotificationTargetNotificationTargetAddPostRaw(requestParameters: AddNotificationTargetNotificationTargetAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['addNotificationTargetRequest'] == null) {
            throw new runtime.RequiredError(
                'addNotificationTargetRequest',
                'Required parameter "addNotificationTargetRequest" was null or undefined when calling addNotificationTargetNotificationTargetAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/target/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNotificationTargetRequestToJSON(requestParameters['addNotificationTargetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Add Notification Target
     */
    async addNotificationTargetNotificationTargetAddPost(requestParameters: AddNotificationTargetNotificationTargetAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.addNotificationTargetNotificationTargetAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Notification Task
     */
    async addNotificationTaskNotificationTaskAddPostRaw(requestParameters: AddNotificationTaskNotificationTaskAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['addNotificationTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addNotificationTaskRequest',
                'Required parameter "addNotificationTaskRequest" was null or undefined when calling addNotificationTaskNotificationTaskAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/task/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNotificationTaskRequestToJSON(requestParameters['addNotificationTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Add Notification Task
     */
    async addNotificationTaskNotificationTaskAddPost(requestParameters: AddNotificationTaskNotificationTaskAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.addNotificationTaskNotificationTaskAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Email Source
     */
    async deleteEmailSourceNotificationSourceDeletePostRaw(requestParameters: DeleteEmailSourceNotificationSourceDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteNotificationSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteNotificationSourceRequest',
                'Required parameter "deleteNotificationSourceRequest" was null or undefined when calling deleteEmailSourceNotificationSourceDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/source/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationSourceRequestToJSON(requestParameters['deleteNotificationSourceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Email Source
     */
    async deleteEmailSourceNotificationSourceDeletePost(requestParameters: DeleteEmailSourceNotificationSourceDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteEmailSourceNotificationSourceDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Notification Record
     */
    async deleteNotificationRecordNotificationRecordDeletePostRaw(requestParameters: DeleteNotificationRecordNotificationRecordDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteNotificationRecordRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteNotificationRecordRequest',
                'Required parameter "deleteNotificationRecordRequest" was null or undefined when calling deleteNotificationRecordNotificationRecordDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/record/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationRecordRequestToJSON(requestParameters['deleteNotificationRecordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Notification Record
     */
    async deleteNotificationRecordNotificationRecordDeletePost(requestParameters: DeleteNotificationRecordNotificationRecordDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteNotificationRecordNotificationRecordDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Notification Target
     */
    async deleteNotificationTargetNotificationTargetDeletePostRaw(requestParameters: DeleteNotificationTargetNotificationTargetDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteNotificationTargetRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteNotificationTargetRequest',
                'Required parameter "deleteNotificationTargetRequest" was null or undefined when calling deleteNotificationTargetNotificationTargetDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/target/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationTargetRequestToJSON(requestParameters['deleteNotificationTargetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Notification Target
     */
    async deleteNotificationTargetNotificationTargetDeletePost(requestParameters: DeleteNotificationTargetNotificationTargetDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteNotificationTargetNotificationTargetDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Notification Task
     */
    async deleteNotificationTaskNotificationTaskDeletePostRaw(requestParameters: DeleteNotificationTaskNotificationTaskDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteNotificationTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteNotificationTaskRequest',
                'Required parameter "deleteNotificationTaskRequest" was null or undefined when calling deleteNotificationTaskNotificationTaskDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/task/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationTaskRequestToJSON(requestParameters['deleteNotificationTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Notification Task
     */
    async deleteNotificationTaskNotificationTaskDeletePost(requestParameters: DeleteNotificationTaskNotificationTaskDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteNotificationTaskNotificationTaskDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Email Source
     */
    async getEmailSourceNotificationSourceMinePostRaw(requestParameters: GetEmailSourceNotificationSourceMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationSourcesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/source/mine`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationSourcesResponseFromJSON(jsonValue));
    }

    /**
     * Get Email Source
     */
    async getEmailSourceNotificationSourceMinePost(requestParameters: GetEmailSourceNotificationSourceMinePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationSourcesResponse> {
        const response = await this.getEmailSourceNotificationSourceMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mine Notification Target
     */
    async getMineNotificationTargetNotificationTargetMinePostRaw(requestParameters: GetMineNotificationTargetNotificationTargetMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTargetsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/target/mine`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTargetsResponseFromJSON(jsonValue));
    }

    /**
     * Get Mine Notification Target
     */
    async getMineNotificationTargetNotificationTargetMinePost(requestParameters: GetMineNotificationTargetNotificationTargetMinePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTargetsResponse> {
        const response = await this.getMineNotificationTargetNotificationTargetMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mine Notification Task
     */
    async getMineNotificationTaskNotificationTaskMinePostRaw(requestParameters: GetMineNotificationTaskNotificationTaskMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTaskResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/task/mine`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTaskResponseFromJSON(jsonValue));
    }

    /**
     * Get Mine Notification Task
     */
    async getMineNotificationTaskNotificationTaskMinePost(requestParameters: GetMineNotificationTaskNotificationTaskMinePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTaskResponse> {
        const response = await this.getMineNotificationTaskNotificationTaskMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Notification Detail
     */
    async getNotificationDetailNotificationSourceDetailPostRaw(requestParameters: GetNotificationDetailNotificationSourceDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationSourceDetail>> {
        if (requestParameters['notificationSourceDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationSourceDetailRequest',
                'Required parameter "notificationSourceDetailRequest" was null or undefined when calling getNotificationDetailNotificationSourceDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/source/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationSourceDetailRequestToJSON(requestParameters['notificationSourceDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationSourceDetailFromJSON(jsonValue));
    }

    /**
     * Get Notification Detail
     */
    async getNotificationDetailNotificationSourceDetailPost(requestParameters: GetNotificationDetailNotificationSourceDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationSourceDetail> {
        const response = await this.getNotificationDetailNotificationSourceDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Notification Record Detail
     */
    async getNotificationRecordDetailNotificationRecordDetailPostRaw(requestParameters: GetNotificationRecordDetailNotificationRecordDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationRecord>> {
        if (requestParameters['notificationRecordDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationRecordDetailRequest',
                'Required parameter "notificationRecordDetailRequest" was null or undefined when calling getNotificationRecordDetailNotificationRecordDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/record/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationRecordDetailRequestToJSON(requestParameters['notificationRecordDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationRecordFromJSON(jsonValue));
    }

    /**
     * Get Notification Record Detail
     */
    async getNotificationRecordDetailNotificationRecordDetailPost(requestParameters: GetNotificationRecordDetailNotificationRecordDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationRecord> {
        const response = await this.getNotificationRecordDetailNotificationRecordDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Notification Target Detail
     */
    async getNotificationTargetDetailNotificationTargetDetailPostRaw(requestParameters: GetNotificationTargetDetailNotificationTargetDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTargetDetail>> {
        if (requestParameters['notificationTargetDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTargetDetailRequest',
                'Required parameter "notificationTargetDetailRequest" was null or undefined when calling getNotificationTargetDetailNotificationTargetDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/notification/target/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTargetDetailRequestToJSON(requestParameters['notificationTargetDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTargetDetailFromJSON(jsonValue));
    }

    /**
     * Get Notification Target Detail
     */
    async getNotificationTargetDetailNotificationTargetDetailPost(requestParameters: GetNotificationTargetDetailNotificationTargetDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTargetDetail> {
        const response = await this.getNotificationTargetDetailNotificationTargetDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Notification Task
     */
    async getNotificationTaskNotificationTaskDetailPostRaw(requestParameters: GetNotificationTaskNotificationTaskDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTask>> {
        if (requestParameters['notificationTaskDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTaskDetailRequest',
                'Required parameter "notificationTaskDetailRequest" was null or undefined when calling getNotificationTaskNotificationTaskDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/task/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTaskDetailRequestToJSON(requestParameters['notificationTaskDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTaskFromJSON(jsonValue));
    }

    /**
     * Get Notification Task
     */
    async getNotificationTaskNotificationTaskDetailPost(requestParameters: GetNotificationTaskNotificationTaskDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTask> {
        const response = await this.getNotificationTaskNotificationTaskDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Notification Templates
     */
    async getNotificationTemplatesNotificationTemplateAllPostRaw(requestParameters: GetNotificationTemplatesNotificationTemplateAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTemplatesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/template/all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTemplatesResponseFromJSON(jsonValue));
    }

    /**
     * Get Notification Templates
     */
    async getNotificationTemplatesNotificationTemplateAllPost(requestParameters: GetNotificationTemplatesNotificationTemplateAllPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTemplatesResponse> {
        const response = await this.getNotificationTemplatesNotificationTemplateAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read All Notification Record
     */
    async readAllNotificationRecordNotificationRecordReadAllPostRaw(requestParameters: ReadAllNotificationRecordNotificationRecordReadAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/record/read-all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Read All Notification Record
     */
    async readAllNotificationRecordNotificationRecordReadAllPost(requestParameters: ReadAllNotificationRecordNotificationRecordReadAllPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.readAllNotificationRecordNotificationRecordReadAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Notification Record
     */
    async readNotificationRecordNotificationRecordReadPostRaw(requestParameters: ReadNotificationRecordNotificationRecordReadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['readNotificationRecordRequest'] == null) {
            throw new runtime.RequiredError(
                'readNotificationRecordRequest',
                'Required parameter "readNotificationRecordRequest" was null or undefined when calling readNotificationRecordNotificationRecordReadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/record/read`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNotificationRecordRequestToJSON(requestParameters['readNotificationRecordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Read Notification Record
     */
    async readNotificationRecordNotificationRecordReadPost(requestParameters: ReadNotificationRecordNotificationRecordReadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.readNotificationRecordNotificationRecordReadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Notification Record
     */
    async searchNotificationRecordNotificationRecordSearchPostRaw(requestParameters: SearchNotificationRecordNotificationRecordSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionNotificationRecord>> {
        if (requestParameters['searchNotificationRecordRequest'] == null) {
            throw new runtime.RequiredError(
                'searchNotificationRecordRequest',
                'Required parameter "searchNotificationRecordRequest" was null or undefined when calling searchNotificationRecordNotificationRecordSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/record/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchNotificationRecordRequestToJSON(requestParameters['searchNotificationRecordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionNotificationRecordFromJSON(jsonValue));
    }

    /**
     * Search Notification Record
     */
    async searchNotificationRecordNotificationRecordSearchPost(requestParameters: SearchNotificationRecordNotificationRecordSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionNotificationRecord> {
        const response = await this.searchNotificationRecordNotificationRecordSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Email Source
     */
    async updateEmailSourceNotificationSourceUpdatePostRaw(requestParameters: UpdateEmailSourceNotificationSourceUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['updateNotificationSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNotificationSourceRequest',
                'Required parameter "updateNotificationSourceRequest" was null or undefined when calling updateEmailSourceNotificationSourceUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/source/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNotificationSourceRequestToJSON(requestParameters['updateNotificationSourceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Email Source
     */
    async updateEmailSourceNotificationSourceUpdatePost(requestParameters: UpdateEmailSourceNotificationSourceUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateEmailSourceNotificationSourceUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Notification Target
     */
    async updateNotificationTargetNotificationTargetUpdatePostRaw(requestParameters: UpdateNotificationTargetNotificationTargetUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['updateNotificationTargetRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNotificationTargetRequest',
                'Required parameter "updateNotificationTargetRequest" was null or undefined when calling updateNotificationTargetNotificationTargetUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/target/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNotificationTargetRequestToJSON(requestParameters['updateNotificationTargetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Notification Target
     */
    async updateNotificationTargetNotificationTargetUpdatePost(requestParameters: UpdateNotificationTargetNotificationTargetUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateNotificationTargetNotificationTargetUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Notification Task
     */
    async updateNotificationTaskNotificationTaskUpdatePostRaw(requestParameters: UpdateNotificationTaskNotificationTaskUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['updateNotificationTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNotificationTaskRequest',
                'Required parameter "updateNotificationTaskRequest" was null or undefined when calling updateNotificationTaskNotificationTaskUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/notification/task/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNotificationTaskRequestToJSON(requestParameters['updateNotificationTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Notification Task
     */
    async updateNotificationTaskNotificationTaskUpdatePost(requestParameters: UpdateNotificationTaskNotificationTaskUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateNotificationTaskNotificationTaskUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
