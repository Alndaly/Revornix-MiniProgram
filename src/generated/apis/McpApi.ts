/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MCPServerCreateRequest,
  MCPServerDeleteRequest,
  MCPServerDetailRequest,
  MCPServerInfo,
  MCPServerSearchRequest,
  MCPServerSearchResponse,
  MCPServerUpdateRequest,
  NormalResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MCPServerCreateRequestFromJSON,
    MCPServerCreateRequestToJSON,
    MCPServerDeleteRequestFromJSON,
    MCPServerDeleteRequestToJSON,
    MCPServerDetailRequestFromJSON,
    MCPServerDetailRequestToJSON,
    MCPServerInfoFromJSON,
    MCPServerInfoToJSON,
    MCPServerSearchRequestFromJSON,
    MCPServerSearchRequestToJSON,
    MCPServerSearchResponseFromJSON,
    MCPServerSearchResponseToJSON,
    MCPServerUpdateRequestFromJSON,
    MCPServerUpdateRequestToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
} from '../models/index';

export interface CreateServerMcpServerCreatePostRequest {
    mCPServerCreateRequest: MCPServerCreateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface DeleteServerMcpServerDeletePostRequest {
    mCPServerDeleteRequest: MCPServerDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetMcpServerDetailMcpServerDetailPostRequest {
    mCPServerDetailRequest: MCPServerDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetMcpServerListMcpServerSearchPostRequest {
    mCPServerSearchRequest: MCPServerSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateServerMcpServerUpdatePostRequest {
    mCPServerUpdateRequest: MCPServerUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class McpApi extends runtime.BaseAPI {

    /**
     * Create Server
     */
    async createServerMcpServerCreatePostRaw(requestParameters: CreateServerMcpServerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['mCPServerCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'mCPServerCreateRequest',
                'Required parameter "mCPServerCreateRequest" was null or undefined when calling createServerMcpServerCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/mcp/server/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPServerCreateRequestToJSON(requestParameters['mCPServerCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Create Server
     */
    async createServerMcpServerCreatePost(requestParameters: CreateServerMcpServerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.createServerMcpServerCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Server
     */
    async deleteServerMcpServerDeletePostRaw(requestParameters: DeleteServerMcpServerDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['mCPServerDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'mCPServerDeleteRequest',
                'Required parameter "mCPServerDeleteRequest" was null or undefined when calling deleteServerMcpServerDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/mcp/server/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPServerDeleteRequestToJSON(requestParameters['mCPServerDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Server
     */
    async deleteServerMcpServerDeletePost(requestParameters: DeleteServerMcpServerDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteServerMcpServerDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mcp Server Detail
     */
    async getMcpServerDetailMcpServerDetailPostRaw(requestParameters: GetMcpServerDetailMcpServerDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPServerInfo>> {
        if (requestParameters['mCPServerDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'mCPServerDetailRequest',
                'Required parameter "mCPServerDetailRequest" was null or undefined when calling getMcpServerDetailMcpServerDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/mcp/server/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPServerDetailRequestToJSON(requestParameters['mCPServerDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MCPServerInfoFromJSON(jsonValue));
    }

    /**
     * Get Mcp Server Detail
     */
    async getMcpServerDetailMcpServerDetailPost(requestParameters: GetMcpServerDetailMcpServerDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPServerInfo> {
        const response = await this.getMcpServerDetailMcpServerDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mcp Server List
     */
    async getMcpServerListMcpServerSearchPostRaw(requestParameters: GetMcpServerListMcpServerSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPServerSearchResponse>> {
        if (requestParameters['mCPServerSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'mCPServerSearchRequest',
                'Required parameter "mCPServerSearchRequest" was null or undefined when calling getMcpServerListMcpServerSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/mcp/server/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPServerSearchRequestToJSON(requestParameters['mCPServerSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MCPServerSearchResponseFromJSON(jsonValue));
    }

    /**
     * Get Mcp Server List
     */
    async getMcpServerListMcpServerSearchPost(requestParameters: GetMcpServerListMcpServerSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPServerSearchResponse> {
        const response = await this.getMcpServerListMcpServerSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Server
     */
    async updateServerMcpServerUpdatePostRaw(requestParameters: UpdateServerMcpServerUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['mCPServerUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'mCPServerUpdateRequest',
                'Required parameter "mCPServerUpdateRequest" was null or undefined when calling updateServerMcpServerUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/mcp/server/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPServerUpdateRequestToJSON(requestParameters['mCPServerUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update Server
     */
    async updateServerMcpServerUpdatePost(requestParameters: UpdateServerMcpServerUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateServerMcpServerUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
